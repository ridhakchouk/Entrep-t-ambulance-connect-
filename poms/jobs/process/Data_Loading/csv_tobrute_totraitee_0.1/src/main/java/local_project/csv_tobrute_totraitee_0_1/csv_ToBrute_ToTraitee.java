// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.csv_tobrute_totraitee_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: csv_ToBrute_ToTraitee Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190523_1134-M6
 * @status
 */
public class csv_ToBrute_ToTraitee implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "csv_ToBrute_ToTraitee";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					csv_ToBrute_ToTraitee.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(csv_ToBrute_ToTraitee.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError8", 0, "error");
			}

			errorCode = null;
			tDBInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError9", 0, "error");
			}

			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError4", 0, "error");
			}

			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError5", 0, "error");
			}

			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError6", 0, "error");
			}

			errorCode = null;
			tDBInput_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError7", 0, "error");
			}

			errorCode = null;
			tDBInput_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class to_pos_bruteStruct implements routines.system.IPersistableRow<to_pos_bruteStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[0];

		public int id_vehicule;

		public int getId_vehicule() {
			return this.id_vehicule;
		}

		public String DATE;

		public String getDATE() {
			return this.DATE;
		}

		public String TIME;

		public String getTIME() {
			return this.TIME;
		}

		public Integer RPM;

		public Integer getRPM() {
			return this.RPM;
		}

		public Float SPEED;

		public Float getSPEED() {
			return this.SPEED;
		}

		public Integer RIGHT_FLASH;

		public Integer getRIGHT_FLASH() {
			return this.RIGHT_FLASH;
		}

		public Integer LEFT_FLASH;

		public Integer getLEFT_FLASH() {
			return this.LEFT_FLASH;
		}

		public Integer BRAKE_PEDAL;

		public Integer getBRAKE_PEDAL() {
			return this.BRAKE_PEDAL;
		}

		public Integer PRIMARY_LT;

		public Integer getPRIMARY_LT() {
			return this.PRIMARY_LT;
		}

		public Integer SECONDARY_LT;

		public Integer getSECONDARY_LT() {
			return this.SECONDARY_LT;
		}

		public Integer WIG_WAG;

		public Integer getWIG_WAG() {
			return this.WIG_WAG;
		}

		public Integer REVERSE_GEAR;

		public Integer getREVERSE_GEAR() {
			return this.REVERSE_GEAR;
		}

		public Float CHASSIS_VOLT;

		public Float getCHASSIS_VOLT() {
			return this.CHASSIS_VOLT;
		}

		public Float CONVERS_VOLT;

		public Float getCONVERS_VOLT() {
			return this.CONVERS_VOLT;
		}

		public Float RADIO_VOLT;

		public Float getRADIO_VOLT() {
			return this.RADIO_VOLT;
		}

		public Integer PARKING_LT;

		public Integer getPARKING_LT() {
			return this.PARKING_LT;
		}

		public Integer HIGH_BEAM_LT;

		public Integer getHIGH_BEAM_LT() {
			return this.HIGH_BEAM_LT;
		}

		public Integer SIREN;

		public Integer getSIREN() {
			return this.SIREN;
		}

		public Integer CHECK_ENGINE;

		public Integer getCHECK_ENGINE() {
			return this.CHECK_ENGINE;
		}

		public Integer THROTTLE;

		public Integer getTHROTTLE() {
			return this.THROTTLE;
		}

		public Float ODOMETER;

		public Float getODOMETER() {
			return this.ODOMETER;
		}

		public Float LONGITUDE;

		public Float getLONGITUDE() {
			return this.LONGITUDE;
		}

		public Float LATITUDE;

		public Float getLATITUDE() {
			return this.LATITUDE;
		}

		public Integer IGNITION;

		public Integer getIGNITION() {
			return this.IGNITION;
		}

		public Integer TIME_RUNNING;

		public Integer getTIME_RUNNING() {
			return this.TIME_RUNNING;
		}

		public Integer TIME_STOP;

		public Integer getTIME_STOP() {
			return this.TIME_STOP;
		}

		public Integer TIME_IDLE;

		public Integer getTIME_IDLE() {
			return this.TIME_IDLE;
		}

		public Float ACC_LONG;

		public Float getACC_LONG() {
			return this.ACC_LONG;
		}

		public Double ACC_LATERAL;

		public Double getACC_LATERAL() {
			return this.ACC_LATERAL;
		}

		public Float ACC_VERTICAL;

		public Float getACC_VERTICAL() {
			return this.ACC_VERTICAL;
		}

		public Float FUEL_RATE;

		public Float getFUEL_RATE() {
			return this.FUEL_RATE;
		}

		public Integer DRIVER_DOOR;

		public Integer getDRIVER_DOOR() {
			return this.DRIVER_DOOR;
		}

		public Integer BACK_DOOR;

		public Integer getBACK_DOOR() {
			return this.BACK_DOOR;
		}

		public Integer PARK_BRAKE;

		public Integer getPARK_BRAKE() {
			return this.PARK_BRAKE;
		}

		public Integer SEAT_BELT;

		public Integer getSEAT_BELT() {
			return this.SEAT_BELT;
		}

		public Integer AIR_BAG;

		public Integer getAIR_BAG() {
			return this.AIR_BAG;
		}

		public Integer ECO_ACTIVE;

		public Integer getECO_ACTIVE() {
			return this.ECO_ACTIVE;
		}

		public Integer ESPAR_ACTIVE;

		public Integer getESPAR_ACTIVE() {
			return this.ESPAR_ACTIVE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee.length == 0) {
						commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_csv_ToBrute_ToTraitee) {

				try {

					int length = 0;

					this.id_vehicule = dis.readInt();

					this.DATE = readString(dis);

					this.TIME = readString(dis);

					this.RPM = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SPEED = null;
					} else {
						this.SPEED = dis.readFloat();
					}

					this.RIGHT_FLASH = readInteger(dis);

					this.LEFT_FLASH = readInteger(dis);

					this.BRAKE_PEDAL = readInteger(dis);

					this.PRIMARY_LT = readInteger(dis);

					this.SECONDARY_LT = readInteger(dis);

					this.WIG_WAG = readInteger(dis);

					this.REVERSE_GEAR = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CHASSIS_VOLT = null;
					} else {
						this.CHASSIS_VOLT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CONVERS_VOLT = null;
					} else {
						this.CONVERS_VOLT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RADIO_VOLT = null;
					} else {
						this.RADIO_VOLT = dis.readFloat();
					}

					this.PARKING_LT = readInteger(dis);

					this.HIGH_BEAM_LT = readInteger(dis);

					this.SIREN = readInteger(dis);

					this.CHECK_ENGINE = readInteger(dis);

					this.THROTTLE = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ODOMETER = null;
					} else {
						this.ODOMETER = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LONGITUDE = null;
					} else {
						this.LONGITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LATITUDE = null;
					} else {
						this.LATITUDE = dis.readFloat();
					}

					this.IGNITION = readInteger(dis);

					this.TIME_RUNNING = readInteger(dis);

					this.TIME_STOP = readInteger(dis);

					this.TIME_IDLE = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ACC_LONG = null;
					} else {
						this.ACC_LONG = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ACC_LATERAL = null;
					} else {
						this.ACC_LATERAL = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ACC_VERTICAL = null;
					} else {
						this.ACC_VERTICAL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FUEL_RATE = null;
					} else {
						this.FUEL_RATE = dis.readFloat();
					}

					this.DRIVER_DOOR = readInteger(dis);

					this.BACK_DOOR = readInteger(dis);

					this.PARK_BRAKE = readInteger(dis);

					this.SEAT_BELT = readInteger(dis);

					this.AIR_BAG = readInteger(dis);

					this.ECO_ACTIVE = readInteger(dis);

					this.ESPAR_ACTIVE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_vehicule);

				// String

				writeString(this.DATE, dos);

				// String

				writeString(this.TIME, dos);

				// Integer

				writeInteger(this.RPM, dos);

				// Float

				if (this.SPEED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SPEED);
				}

				// Integer

				writeInteger(this.RIGHT_FLASH, dos);

				// Integer

				writeInteger(this.LEFT_FLASH, dos);

				// Integer

				writeInteger(this.BRAKE_PEDAL, dos);

				// Integer

				writeInteger(this.PRIMARY_LT, dos);

				// Integer

				writeInteger(this.SECONDARY_LT, dos);

				// Integer

				writeInteger(this.WIG_WAG, dos);

				// Integer

				writeInteger(this.REVERSE_GEAR, dos);

				// Float

				if (this.CHASSIS_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CHASSIS_VOLT);
				}

				// Float

				if (this.CONVERS_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONVERS_VOLT);
				}

				// Float

				if (this.RADIO_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.RADIO_VOLT);
				}

				// Integer

				writeInteger(this.PARKING_LT, dos);

				// Integer

				writeInteger(this.HIGH_BEAM_LT, dos);

				// Integer

				writeInteger(this.SIREN, dos);

				// Integer

				writeInteger(this.CHECK_ENGINE, dos);

				// Integer

				writeInteger(this.THROTTLE, dos);

				// Float

				if (this.ODOMETER == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ODOMETER);
				}

				// Float

				if (this.LONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LONGITUDE);
				}

				// Float

				if (this.LATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LATITUDE);
				}

				// Integer

				writeInteger(this.IGNITION, dos);

				// Integer

				writeInteger(this.TIME_RUNNING, dos);

				// Integer

				writeInteger(this.TIME_STOP, dos);

				// Integer

				writeInteger(this.TIME_IDLE, dos);

				// Float

				if (this.ACC_LONG == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ACC_LONG);
				}

				// Double

				if (this.ACC_LATERAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ACC_LATERAL);
				}

				// Float

				if (this.ACC_VERTICAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ACC_VERTICAL);
				}

				// Float

				if (this.FUEL_RATE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FUEL_RATE);
				}

				// Integer

				writeInteger(this.DRIVER_DOOR, dos);

				// Integer

				writeInteger(this.BACK_DOOR, dos);

				// Integer

				writeInteger(this.PARK_BRAKE, dos);

				// Integer

				writeInteger(this.SEAT_BELT, dos);

				// Integer

				writeInteger(this.AIR_BAG, dos);

				// Integer

				writeInteger(this.ECO_ACTIVE, dos);

				// Integer

				writeInteger(this.ESPAR_ACTIVE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_vehicule=" + String.valueOf(id_vehicule));
			sb.append(",DATE=" + DATE);
			sb.append(",TIME=" + TIME);
			sb.append(",RPM=" + String.valueOf(RPM));
			sb.append(",SPEED=" + String.valueOf(SPEED));
			sb.append(",RIGHT_FLASH=" + String.valueOf(RIGHT_FLASH));
			sb.append(",LEFT_FLASH=" + String.valueOf(LEFT_FLASH));
			sb.append(",BRAKE_PEDAL=" + String.valueOf(BRAKE_PEDAL));
			sb.append(",PRIMARY_LT=" + String.valueOf(PRIMARY_LT));
			sb.append(",SECONDARY_LT=" + String.valueOf(SECONDARY_LT));
			sb.append(",WIG_WAG=" + String.valueOf(WIG_WAG));
			sb.append(",REVERSE_GEAR=" + String.valueOf(REVERSE_GEAR));
			sb.append(",CHASSIS_VOLT=" + String.valueOf(CHASSIS_VOLT));
			sb.append(",CONVERS_VOLT=" + String.valueOf(CONVERS_VOLT));
			sb.append(",RADIO_VOLT=" + String.valueOf(RADIO_VOLT));
			sb.append(",PARKING_LT=" + String.valueOf(PARKING_LT));
			sb.append(",HIGH_BEAM_LT=" + String.valueOf(HIGH_BEAM_LT));
			sb.append(",SIREN=" + String.valueOf(SIREN));
			sb.append(",CHECK_ENGINE=" + String.valueOf(CHECK_ENGINE));
			sb.append(",THROTTLE=" + String.valueOf(THROTTLE));
			sb.append(",ODOMETER=" + String.valueOf(ODOMETER));
			sb.append(",LONGITUDE=" + String.valueOf(LONGITUDE));
			sb.append(",LATITUDE=" + String.valueOf(LATITUDE));
			sb.append(",IGNITION=" + String.valueOf(IGNITION));
			sb.append(",TIME_RUNNING=" + String.valueOf(TIME_RUNNING));
			sb.append(",TIME_STOP=" + String.valueOf(TIME_STOP));
			sb.append(",TIME_IDLE=" + String.valueOf(TIME_IDLE));
			sb.append(",ACC_LONG=" + String.valueOf(ACC_LONG));
			sb.append(",ACC_LATERAL=" + String.valueOf(ACC_LATERAL));
			sb.append(",ACC_VERTICAL=" + String.valueOf(ACC_VERTICAL));
			sb.append(",FUEL_RATE=" + String.valueOf(FUEL_RATE));
			sb.append(",DRIVER_DOOR=" + String.valueOf(DRIVER_DOOR));
			sb.append(",BACK_DOOR=" + String.valueOf(BACK_DOOR));
			sb.append(",PARK_BRAKE=" + String.valueOf(PARK_BRAKE));
			sb.append(",SEAT_BELT=" + String.valueOf(SEAT_BELT));
			sb.append(",AIR_BAG=" + String.valueOf(AIR_BAG));
			sb.append(",ECO_ACTIVE=" + String.valueOf(ECO_ACTIVE));
			sb.append(",ESPAR_ACTIVE=" + String.valueOf(ESPAR_ACTIVE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_pos_bruteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[0];

		public String DATE;

		public String getDATE() {
			return this.DATE;
		}

		public String TIME;

		public String getTIME() {
			return this.TIME;
		}

		public Integer RPM;

		public Integer getRPM() {
			return this.RPM;
		}

		public Float SPEED;

		public Float getSPEED() {
			return this.SPEED;
		}

		public Integer RIGHT_FLASH;

		public Integer getRIGHT_FLASH() {
			return this.RIGHT_FLASH;
		}

		public Integer LEFT_FLASH;

		public Integer getLEFT_FLASH() {
			return this.LEFT_FLASH;
		}

		public Integer BRAKE_PEDAL;

		public Integer getBRAKE_PEDAL() {
			return this.BRAKE_PEDAL;
		}

		public Integer PRIMARY_LT;

		public Integer getPRIMARY_LT() {
			return this.PRIMARY_LT;
		}

		public Integer SECONDARY_LT;

		public Integer getSECONDARY_LT() {
			return this.SECONDARY_LT;
		}

		public Integer WIG_WAG;

		public Integer getWIG_WAG() {
			return this.WIG_WAG;
		}

		public Integer REVERSE_GEAR;

		public Integer getREVERSE_GEAR() {
			return this.REVERSE_GEAR;
		}

		public Float CHASSIS_VOLT;

		public Float getCHASSIS_VOLT() {
			return this.CHASSIS_VOLT;
		}

		public Float CONVERS_VOLT;

		public Float getCONVERS_VOLT() {
			return this.CONVERS_VOLT;
		}

		public Float RADIO_VOLT;

		public Float getRADIO_VOLT() {
			return this.RADIO_VOLT;
		}

		public Integer PARKING_LT;

		public Integer getPARKING_LT() {
			return this.PARKING_LT;
		}

		public Integer HIGH_BEAM_LT;

		public Integer getHIGH_BEAM_LT() {
			return this.HIGH_BEAM_LT;
		}

		public Integer SIREN;

		public Integer getSIREN() {
			return this.SIREN;
		}

		public Integer CHECK_ENGINE;

		public Integer getCHECK_ENGINE() {
			return this.CHECK_ENGINE;
		}

		public Integer THROTTLE;

		public Integer getTHROTTLE() {
			return this.THROTTLE;
		}

		public Float ODOMETER;

		public Float getODOMETER() {
			return this.ODOMETER;
		}

		public Float LONGITUDE;

		public Float getLONGITUDE() {
			return this.LONGITUDE;
		}

		public Float LATITUDE;

		public Float getLATITUDE() {
			return this.LATITUDE;
		}

		public Integer IGNITION;

		public Integer getIGNITION() {
			return this.IGNITION;
		}

		public Integer TIME_RUNNING;

		public Integer getTIME_RUNNING() {
			return this.TIME_RUNNING;
		}

		public Integer TIME_STOP;

		public Integer getTIME_STOP() {
			return this.TIME_STOP;
		}

		public Integer TIME_IDLE;

		public Integer getTIME_IDLE() {
			return this.TIME_IDLE;
		}

		public Float ACC_LONG;

		public Float getACC_LONG() {
			return this.ACC_LONG;
		}

		public Double ACC_LATERAL;

		public Double getACC_LATERAL() {
			return this.ACC_LATERAL;
		}

		public Float ACC_VERTICAL;

		public Float getACC_VERTICAL() {
			return this.ACC_VERTICAL;
		}

		public Float FUEL_RATE;

		public Float getFUEL_RATE() {
			return this.FUEL_RATE;
		}

		public Integer DRIVER_DOOR;

		public Integer getDRIVER_DOOR() {
			return this.DRIVER_DOOR;
		}

		public Integer BACK_DOOR;

		public Integer getBACK_DOOR() {
			return this.BACK_DOOR;
		}

		public Integer PARK_BRAKE;

		public Integer getPARK_BRAKE() {
			return this.PARK_BRAKE;
		}

		public Integer SEAT_BELT;

		public Integer getSEAT_BELT() {
			return this.SEAT_BELT;
		}

		public Integer AIR_BAG;

		public Integer getAIR_BAG() {
			return this.AIR_BAG;
		}

		public Integer ECO_ACTIVE;

		public Integer getECO_ACTIVE() {
			return this.ECO_ACTIVE;
		}

		public Integer ESPAR_ACTIVE;

		public Integer getESPAR_ACTIVE() {
			return this.ESPAR_ACTIVE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee.length == 0) {
						commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_csv_ToBrute_ToTraitee, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_csv_ToBrute_ToTraitee) {

				try {

					int length = 0;

					this.DATE = readString(dis);

					this.TIME = readString(dis);

					this.RPM = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SPEED = null;
					} else {
						this.SPEED = dis.readFloat();
					}

					this.RIGHT_FLASH = readInteger(dis);

					this.LEFT_FLASH = readInteger(dis);

					this.BRAKE_PEDAL = readInteger(dis);

					this.PRIMARY_LT = readInteger(dis);

					this.SECONDARY_LT = readInteger(dis);

					this.WIG_WAG = readInteger(dis);

					this.REVERSE_GEAR = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CHASSIS_VOLT = null;
					} else {
						this.CHASSIS_VOLT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CONVERS_VOLT = null;
					} else {
						this.CONVERS_VOLT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RADIO_VOLT = null;
					} else {
						this.RADIO_VOLT = dis.readFloat();
					}

					this.PARKING_LT = readInteger(dis);

					this.HIGH_BEAM_LT = readInteger(dis);

					this.SIREN = readInteger(dis);

					this.CHECK_ENGINE = readInteger(dis);

					this.THROTTLE = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ODOMETER = null;
					} else {
						this.ODOMETER = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LONGITUDE = null;
					} else {
						this.LONGITUDE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LATITUDE = null;
					} else {
						this.LATITUDE = dis.readFloat();
					}

					this.IGNITION = readInteger(dis);

					this.TIME_RUNNING = readInteger(dis);

					this.TIME_STOP = readInteger(dis);

					this.TIME_IDLE = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ACC_LONG = null;
					} else {
						this.ACC_LONG = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ACC_LATERAL = null;
					} else {
						this.ACC_LATERAL = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ACC_VERTICAL = null;
					} else {
						this.ACC_VERTICAL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FUEL_RATE = null;
					} else {
						this.FUEL_RATE = dis.readFloat();
					}

					this.DRIVER_DOOR = readInteger(dis);

					this.BACK_DOOR = readInteger(dis);

					this.PARK_BRAKE = readInteger(dis);

					this.SEAT_BELT = readInteger(dis);

					this.AIR_BAG = readInteger(dis);

					this.ECO_ACTIVE = readInteger(dis);

					this.ESPAR_ACTIVE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DATE, dos);

				// String

				writeString(this.TIME, dos);

				// Integer

				writeInteger(this.RPM, dos);

				// Float

				if (this.SPEED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SPEED);
				}

				// Integer

				writeInteger(this.RIGHT_FLASH, dos);

				// Integer

				writeInteger(this.LEFT_FLASH, dos);

				// Integer

				writeInteger(this.BRAKE_PEDAL, dos);

				// Integer

				writeInteger(this.PRIMARY_LT, dos);

				// Integer

				writeInteger(this.SECONDARY_LT, dos);

				// Integer

				writeInteger(this.WIG_WAG, dos);

				// Integer

				writeInteger(this.REVERSE_GEAR, dos);

				// Float

				if (this.CHASSIS_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CHASSIS_VOLT);
				}

				// Float

				if (this.CONVERS_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONVERS_VOLT);
				}

				// Float

				if (this.RADIO_VOLT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.RADIO_VOLT);
				}

				// Integer

				writeInteger(this.PARKING_LT, dos);

				// Integer

				writeInteger(this.HIGH_BEAM_LT, dos);

				// Integer

				writeInteger(this.SIREN, dos);

				// Integer

				writeInteger(this.CHECK_ENGINE, dos);

				// Integer

				writeInteger(this.THROTTLE, dos);

				// Float

				if (this.ODOMETER == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ODOMETER);
				}

				// Float

				if (this.LONGITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LONGITUDE);
				}

				// Float

				if (this.LATITUDE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LATITUDE);
				}

				// Integer

				writeInteger(this.IGNITION, dos);

				// Integer

				writeInteger(this.TIME_RUNNING, dos);

				// Integer

				writeInteger(this.TIME_STOP, dos);

				// Integer

				writeInteger(this.TIME_IDLE, dos);

				// Float

				if (this.ACC_LONG == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ACC_LONG);
				}

				// Double

				if (this.ACC_LATERAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ACC_LATERAL);
				}

				// Float

				if (this.ACC_VERTICAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ACC_VERTICAL);
				}

				// Float

				if (this.FUEL_RATE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FUEL_RATE);
				}

				// Integer

				writeInteger(this.DRIVER_DOOR, dos);

				// Integer

				writeInteger(this.BACK_DOOR, dos);

				// Integer

				writeInteger(this.PARK_BRAKE, dos);

				// Integer

				writeInteger(this.SEAT_BELT, dos);

				// Integer

				writeInteger(this.AIR_BAG, dos);

				// Integer

				writeInteger(this.ECO_ACTIVE, dos);

				// Integer

				writeInteger(this.ESPAR_ACTIVE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DATE=" + DATE);
			sb.append(",TIME=" + TIME);
			sb.append(",RPM=" + String.valueOf(RPM));
			sb.append(",SPEED=" + String.valueOf(SPEED));
			sb.append(",RIGHT_FLASH=" + String.valueOf(RIGHT_FLASH));
			sb.append(",LEFT_FLASH=" + String.valueOf(LEFT_FLASH));
			sb.append(",BRAKE_PEDAL=" + String.valueOf(BRAKE_PEDAL));
			sb.append(",PRIMARY_LT=" + String.valueOf(PRIMARY_LT));
			sb.append(",SECONDARY_LT=" + String.valueOf(SECONDARY_LT));
			sb.append(",WIG_WAG=" + String.valueOf(WIG_WAG));
			sb.append(",REVERSE_GEAR=" + String.valueOf(REVERSE_GEAR));
			sb.append(",CHASSIS_VOLT=" + String.valueOf(CHASSIS_VOLT));
			sb.append(",CONVERS_VOLT=" + String.valueOf(CONVERS_VOLT));
			sb.append(",RADIO_VOLT=" + String.valueOf(RADIO_VOLT));
			sb.append(",PARKING_LT=" + String.valueOf(PARKING_LT));
			sb.append(",HIGH_BEAM_LT=" + String.valueOf(HIGH_BEAM_LT));
			sb.append(",SIREN=" + String.valueOf(SIREN));
			sb.append(",CHECK_ENGINE=" + String.valueOf(CHECK_ENGINE));
			sb.append(",THROTTLE=" + String.valueOf(THROTTLE));
			sb.append(",ODOMETER=" + String.valueOf(ODOMETER));
			sb.append(",LONGITUDE=" + String.valueOf(LONGITUDE));
			sb.append(",LATITUDE=" + String.valueOf(LATITUDE));
			sb.append(",IGNITION=" + String.valueOf(IGNITION));
			sb.append(",TIME_RUNNING=" + String.valueOf(TIME_RUNNING));
			sb.append(",TIME_STOP=" + String.valueOf(TIME_STOP));
			sb.append(",TIME_IDLE=" + String.valueOf(TIME_IDLE));
			sb.append(",ACC_LONG=" + String.valueOf(ACC_LONG));
			sb.append(",ACC_LATERAL=" + String.valueOf(ACC_LATERAL));
			sb.append(",ACC_VERTICAL=" + String.valueOf(ACC_VERTICAL));
			sb.append(",FUEL_RATE=" + String.valueOf(FUEL_RATE));
			sb.append(",DRIVER_DOOR=" + String.valueOf(DRIVER_DOOR));
			sb.append(",BACK_DOOR=" + String.valueOf(BACK_DOOR));
			sb.append(",PARK_BRAKE=" + String.valueOf(PARK_BRAKE));
			sb.append(",SEAT_BELT=" + String.valueOf(SEAT_BELT));
			sb.append(",AIR_BAG=" + String.valueOf(AIR_BAG));
			sb.append(",ECO_ACTIVE=" + String.valueOf(ECO_ACTIVE));
			sb.append(",ESPAR_ACTIVE=" + String.valueOf(ESPAR_ACTIVE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				to_pos_bruteStruct to_pos_brute = new to_pos_bruteStruct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = "/users/21407340t/Desktop/Talend source files/CSV";
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*.csv");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				Comparator<java.io.File> fileNameASC_tFileList_1 = new Comparator<java.io.File>() {

					public int compare(java.io.File o1, java.io.File o2) {
						boolean bO1IsFile = o1.isFile();
						boolean bO2IsFile = o2.isFile();

						if (bO1IsFile && bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else if (bO1IsFile && (!bO2IsFile)) {
							return 1;
						} else if ((!bO1IsFile) && bO2IsFile) {
							return -1;
						} else if (!bO1IsFile && !bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else {
							return 0;
						}
					}
				};
				java.util.Collections.sort(list_tFileList_1, fileNameASC_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileInputDelimited_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("to_pos_brute", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tDBOutput_1 begin ] start
					 */

					ok_Hash.put("tDBOutput_1", false);
					start_Hash.put("tDBOutput_1", System.currentTimeMillis());

					currentComponent = "tDBOutput_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("to_pos_brute" + iterateId, 0, 0);

						}
					}

					int tos_count_tDBOutput_1 = 0;

					String dbschema_tDBOutput_1 = null;
					dbschema_tDBOutput_1 = "public";

					String tableName_tDBOutput_1 = null;
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						tableName_tDBOutput_1 = "pos_brute";
					} else {
						tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "pos_brute";
					}

					int nb_line_tDBOutput_1 = 0;
					int nb_line_update_tDBOutput_1 = 0;
					int nb_line_inserted_tDBOutput_1 = 0;
					int nb_line_deleted_tDBOutput_1 = 0;
					int nb_line_rejected_tDBOutput_1 = 0;

					int deletedCount_tDBOutput_1 = 0;
					int updatedCount_tDBOutput_1 = 0;
					int insertedCount_tDBOutput_1 = 0;
					int rejectedCount_tDBOutput_1 = 0;

					boolean whetherReject_tDBOutput_1 = false;

					java.sql.Connection conn_tDBOutput_1 = null;
					String dbUser_tDBOutput_1 = null;

					java.lang.Class.forName("org.postgresql.Driver");

					String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";
					dbUser_tDBOutput_1 = "postgres";

					final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
							.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

					String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

					conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
							dbPwd_tDBOutput_1);

					resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
					conn_tDBOutput_1.setAutoCommit(false);
					int commitEvery_tDBOutput_1 = 10000;
					int commitCounter_tDBOutput_1 = 0;

					int batchSize_tDBOutput_1 = 10000;
					int batchSizeCounter_tDBOutput_1 = 0;

					int count_tDBOutput_1 = 0;
					String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
							+ "\" (\"DATE\",\"TIME\",\"SPEED\",\"WIG_WAG\",\"CHASSIS_VOLT\",\"CONVERS_VOLT\",\"RADIO_VOLT\",\"ODOMETER\",\"LONGITUDE\",\"LATITUDE\",\"ACC_LONG\",\"ACC_LATERAL\",\"ACC_VERTICAL\",\"FUEL_RATE\",\"id_vehicule\",\"RPM\",\"RIGHT_FLASH\",\"LEFT_FLASH\",\"BRAKE_PEDAL\",\"PRIMARY_LT\",\"SECONDARY_LT\",\"REVERSE_GEAR\",\"PARKING_LT\",\"HIGH_BEAM_LT\",\"SIREN\",\"CHECK_ENGINE\",\"THROTTLE\",\"IGNITION\",\"TIME_RUNNING\",\"TIME_STOP\",\"TIME_IDLE\",\"DRIVER_DOOR\",\"BACK_DOOR\",\"PARK_BRAKE\",\"SEAT_BELT\",\"AIR_BAG\",\"ECO_ACTIVE\",\"ESPAR_ACTIVE\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

					java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
							.prepareStatement(insert_tDBOutput_1);
					resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

					/**
					 * [tDBOutput_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

						}
					}

					int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
					to_pos_bruteStruct to_pos_brute_tmp = new to_pos_bruteStruct();
// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					int limit_tFileInputDelimited_1 = -1;
					try {

						Object filename_tFileInputDelimited_1 = ((String) globalMap
								.get("tFileList_1_CURRENT_FILEPATH"));
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap.get("tFileList_1_CURRENT_FILEPATH")), "ISO-8859-15", ",", "\n",
									true, 5, 0, limit_tFileInputDelimited_1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
							rowstate_tFileInputDelimited_1.reset();

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_1 = 0;

								row1.DATE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 1;

								row1.TIME = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.RPM = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RPM", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.RPM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.SPEED = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SPEED", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.SPEED = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.RIGHT_FLASH = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RIGHT_FLASH", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.RIGHT_FLASH = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.LEFT_FLASH = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"LEFT_FLASH", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.LEFT_FLASH = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.BRAKE_PEDAL = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BRAKE_PEDAL", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.BRAKE_PEDAL = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.PRIMARY_LT = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"PRIMARY_LT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.PRIMARY_LT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.SECONDARY_LT = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SECONDARY_LT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.SECONDARY_LT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.WIG_WAG = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"WIG_WAG", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.WIG_WAG = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.REVERSE_GEAR = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"REVERSE_GEAR", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.REVERSE_GEAR = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.CHASSIS_VOLT = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CHASSIS_VOLT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.CHASSIS_VOLT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.CONVERS_VOLT = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CONVERS_VOLT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.CONVERS_VOLT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.RADIO_VOLT = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RADIO_VOLT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.RADIO_VOLT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.PARKING_LT = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"PARKING_LT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.PARKING_LT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.HIGH_BEAM_LT = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"HIGH_BEAM_LT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.HIGH_BEAM_LT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.SIREN = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SIREN", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.SIREN = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.CHECK_ENGINE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CHECK_ENGINE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.CHECK_ENGINE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.THROTTLE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"THROTTLE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.THROTTLE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ODOMETER = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ODOMETER", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ODOMETER = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.LONGITUDE = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"LONGITUDE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.LONGITUDE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.LATITUDE = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"LATITUDE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.LATITUDE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.IGNITION = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IGNITION", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.IGNITION = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.TIME_RUNNING = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TIME_RUNNING", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.TIME_RUNNING = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.TIME_STOP = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TIME_STOP", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.TIME_STOP = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.TIME_IDLE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"TIME_IDLE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.TIME_IDLE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ACC_LONG = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ACC_LONG", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ACC_LONG = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ACC_LATERAL = ParserUtils.parseTo_Double(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ACC_LATERAL", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ACC_LATERAL = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ACC_VERTICAL = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ACC_VERTICAL", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ACC_VERTICAL = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.FUEL_RATE = ParserUtils.parseTo_Float(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"FUEL_RATE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.FUEL_RATE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.DRIVER_DOOR = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DRIVER_DOOR", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.DRIVER_DOOR = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 31;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.BACK_DOOR = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BACK_DOOR", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.BACK_DOOR = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 32;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.PARK_BRAKE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"PARK_BRAKE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.PARK_BRAKE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 33;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.SEAT_BELT = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SEAT_BELT", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.SEAT_BELT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 34;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.AIR_BAG = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AIR_BAG", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.AIR_BAG = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 35;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ECO_ACTIVE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ECO_ACTIVE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ECO_ACTIVE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 36;

								temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
								if (temp.length() > 0) {

									try {

										row1.ESPAR_ACTIVE = ParserUtils.parseTo_Integer(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_1) {
										rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
												"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ESPAR_ACTIVE", "row1", temp, ex_tFileInputDelimited_1),
												ex_tFileInputDelimited_1));
									}

								} else {

									row1.ESPAR_ACTIVE = null;

								}

								if (rowstate_tFileInputDelimited_1.getException() != null) {
									throw rowstate_tFileInputDelimited_1.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */

							/**
							 * [tFileInputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									to_pos_brute = null;

// # Output table : 'to_pos_brute'
									to_pos_brute_tmp.id_vehicule = Integer.parseInt(
											(((String) globalMap.get("tFileList_1_CURRENT_FILE")).substring(0, 4)));
									to_pos_brute_tmp.DATE = row1.DATE;
									to_pos_brute_tmp.TIME = row1.TIME;
									to_pos_brute_tmp.RPM = row1.RPM;
									to_pos_brute_tmp.SPEED = row1.SPEED;
									to_pos_brute_tmp.RIGHT_FLASH = row1.RIGHT_FLASH;
									to_pos_brute_tmp.LEFT_FLASH = row1.LEFT_FLASH;
									to_pos_brute_tmp.BRAKE_PEDAL = row1.BRAKE_PEDAL;
									to_pos_brute_tmp.PRIMARY_LT = row1.PRIMARY_LT;
									to_pos_brute_tmp.SECONDARY_LT = row1.SECONDARY_LT;
									to_pos_brute_tmp.WIG_WAG = row1.WIG_WAG;
									to_pos_brute_tmp.REVERSE_GEAR = row1.REVERSE_GEAR;
									to_pos_brute_tmp.CHASSIS_VOLT = row1.CHASSIS_VOLT;
									to_pos_brute_tmp.CONVERS_VOLT = row1.CONVERS_VOLT;
									to_pos_brute_tmp.RADIO_VOLT = row1.RADIO_VOLT;
									to_pos_brute_tmp.PARKING_LT = row1.PARKING_LT;
									to_pos_brute_tmp.HIGH_BEAM_LT = row1.HIGH_BEAM_LT;
									to_pos_brute_tmp.SIREN = row1.SIREN;
									to_pos_brute_tmp.CHECK_ENGINE = row1.CHECK_ENGINE;
									to_pos_brute_tmp.THROTTLE = row1.THROTTLE;
									to_pos_brute_tmp.ODOMETER = row1.ODOMETER;
									to_pos_brute_tmp.LONGITUDE = row1.LONGITUDE;
									to_pos_brute_tmp.LATITUDE = row1.LATITUDE;
									to_pos_brute_tmp.IGNITION = row1.IGNITION;
									to_pos_brute_tmp.TIME_RUNNING = row1.TIME_RUNNING;
									to_pos_brute_tmp.TIME_STOP = row1.TIME_STOP;
									to_pos_brute_tmp.TIME_IDLE = row1.TIME_IDLE;
									to_pos_brute_tmp.ACC_LONG = row1.ACC_LONG;
									to_pos_brute_tmp.ACC_LATERAL = row1.ACC_LATERAL;
									to_pos_brute_tmp.ACC_VERTICAL = row1.ACC_VERTICAL;
									to_pos_brute_tmp.FUEL_RATE = row1.FUEL_RATE;
									to_pos_brute_tmp.DRIVER_DOOR = row1.DRIVER_DOOR;
									to_pos_brute_tmp.BACK_DOOR = row1.BACK_DOOR;
									to_pos_brute_tmp.PARK_BRAKE = row1.PARK_BRAKE;
									to_pos_brute_tmp.SEAT_BELT = row1.SEAT_BELT;
									to_pos_brute_tmp.AIR_BAG = row1.AIR_BAG;
									to_pos_brute_tmp.ECO_ACTIVE = row1.ECO_ACTIVE;
									to_pos_brute_tmp.ESPAR_ACTIVE = row1.ESPAR_ACTIVE;
									to_pos_brute = to_pos_brute_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "to_pos_brute"
								if (to_pos_brute != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									// to_pos_brute
									// to_pos_brute

									if (execStat) {
										runStat.updateStatOnConnection("to_pos_brute" + iterateId, 1, 1);
									}

									whetherReject_tDBOutput_1 = false;
									if (to_pos_brute.DATE == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, to_pos_brute.DATE);
									}

									if (to_pos_brute.TIME == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2, to_pos_brute.TIME);
									}

									if (to_pos_brute.SPEED == null) {
										pstmt_tDBOutput_1.setNull(3, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(3, to_pos_brute.SPEED);
									}

									if (to_pos_brute.WIG_WAG == null) {
										pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(4, to_pos_brute.WIG_WAG);
									}

									if (to_pos_brute.CHASSIS_VOLT == null) {
										pstmt_tDBOutput_1.setNull(5, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(5, to_pos_brute.CHASSIS_VOLT);
									}

									if (to_pos_brute.CONVERS_VOLT == null) {
										pstmt_tDBOutput_1.setNull(6, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(6, to_pos_brute.CONVERS_VOLT);
									}

									if (to_pos_brute.RADIO_VOLT == null) {
										pstmt_tDBOutput_1.setNull(7, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(7, to_pos_brute.RADIO_VOLT);
									}

									if (to_pos_brute.ODOMETER == null) {
										pstmt_tDBOutput_1.setNull(8, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(8, to_pos_brute.ODOMETER);
									}

									if (to_pos_brute.LONGITUDE == null) {
										pstmt_tDBOutput_1.setNull(9, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(9, to_pos_brute.LONGITUDE);
									}

									if (to_pos_brute.LATITUDE == null) {
										pstmt_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(10, to_pos_brute.LATITUDE);
									}

									if (to_pos_brute.ACC_LONG == null) {
										pstmt_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(11, to_pos_brute.ACC_LONG);
									}

									if (to_pos_brute.ACC_LATERAL == null) {
										pstmt_tDBOutput_1.setNull(12, java.sql.Types.DOUBLE);
									} else {
										pstmt_tDBOutput_1.setDouble(12, to_pos_brute.ACC_LATERAL);
									}

									if (to_pos_brute.ACC_VERTICAL == null) {
										pstmt_tDBOutput_1.setNull(13, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(13, to_pos_brute.ACC_VERTICAL);
									}

									if (to_pos_brute.FUEL_RATE == null) {
										pstmt_tDBOutput_1.setNull(14, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(14, to_pos_brute.FUEL_RATE);
									}

									pstmt_tDBOutput_1.setInt(15, to_pos_brute.id_vehicule);

									if (to_pos_brute.RPM == null) {
										pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(16, to_pos_brute.RPM);
									}

									if (to_pos_brute.RIGHT_FLASH == null) {
										pstmt_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(17, to_pos_brute.RIGHT_FLASH);
									}

									if (to_pos_brute.LEFT_FLASH == null) {
										pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(18, to_pos_brute.LEFT_FLASH);
									}

									if (to_pos_brute.BRAKE_PEDAL == null) {
										pstmt_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(19, to_pos_brute.BRAKE_PEDAL);
									}

									if (to_pos_brute.PRIMARY_LT == null) {
										pstmt_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(20, to_pos_brute.PRIMARY_LT);
									}

									if (to_pos_brute.SECONDARY_LT == null) {
										pstmt_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(21, to_pos_brute.SECONDARY_LT);
									}

									if (to_pos_brute.REVERSE_GEAR == null) {
										pstmt_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(22, to_pos_brute.REVERSE_GEAR);
									}

									if (to_pos_brute.PARKING_LT == null) {
										pstmt_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(23, to_pos_brute.PARKING_LT);
									}

									if (to_pos_brute.HIGH_BEAM_LT == null) {
										pstmt_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(24, to_pos_brute.HIGH_BEAM_LT);
									}

									if (to_pos_brute.SIREN == null) {
										pstmt_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(25, to_pos_brute.SIREN);
									}

									if (to_pos_brute.CHECK_ENGINE == null) {
										pstmt_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(26, to_pos_brute.CHECK_ENGINE);
									}

									if (to_pos_brute.THROTTLE == null) {
										pstmt_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(27, to_pos_brute.THROTTLE);
									}

									if (to_pos_brute.IGNITION == null) {
										pstmt_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(28, to_pos_brute.IGNITION);
									}

									if (to_pos_brute.TIME_RUNNING == null) {
										pstmt_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(29, to_pos_brute.TIME_RUNNING);
									}

									if (to_pos_brute.TIME_STOP == null) {
										pstmt_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(30, to_pos_brute.TIME_STOP);
									}

									if (to_pos_brute.TIME_IDLE == null) {
										pstmt_tDBOutput_1.setNull(31, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(31, to_pos_brute.TIME_IDLE);
									}

									if (to_pos_brute.DRIVER_DOOR == null) {
										pstmt_tDBOutput_1.setNull(32, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(32, to_pos_brute.DRIVER_DOOR);
									}

									if (to_pos_brute.BACK_DOOR == null) {
										pstmt_tDBOutput_1.setNull(33, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(33, to_pos_brute.BACK_DOOR);
									}

									if (to_pos_brute.PARK_BRAKE == null) {
										pstmt_tDBOutput_1.setNull(34, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(34, to_pos_brute.PARK_BRAKE);
									}

									if (to_pos_brute.SEAT_BELT == null) {
										pstmt_tDBOutput_1.setNull(35, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(35, to_pos_brute.SEAT_BELT);
									}

									if (to_pos_brute.AIR_BAG == null) {
										pstmt_tDBOutput_1.setNull(36, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(36, to_pos_brute.AIR_BAG);
									}

									if (to_pos_brute.ECO_ACTIVE == null) {
										pstmt_tDBOutput_1.setNull(37, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(37, to_pos_brute.ECO_ACTIVE);
									}

									if (to_pos_brute.ESPAR_ACTIVE == null) {
										pstmt_tDBOutput_1.setNull(38, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(38, to_pos_brute.ESPAR_ACTIVE);
									}

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;

									batchSizeCounter_tDBOutput_1++;

									if ((batchSize_tDBOutput_1 > 0)
											&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
										try {
											int countSum_tDBOutput_1 = 0;

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

											batchSizeCounter_tDBOutput_1 = 0;
										} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
											java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
													sqle_tDBOutput_1 = null;
											String errormessage_tDBOutput_1;
											if (ne_tDBOutput_1 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_1 = new java.sql.SQLException(
														e_tDBOutput_1.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_1.getMessage(),
														ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
														ne_tDBOutput_1);
												errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
											} else {
												errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
											}

											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

											System.err.println(errormessage_tDBOutput_1);

										}
									}

									commitCounter_tDBOutput_1++;
									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
										if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
											try {
												int countSum_tDBOutput_1 = 0;

												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}

												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

												batchSizeCounter_tDBOutput_1 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
												java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
														sqle_tDBOutput_1 = null;
												String errormessage_tDBOutput_1;
												if (ne_tDBOutput_1 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_1 = new java.sql.SQLException(
															e_tDBOutput_1.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_1.getMessage(),
															ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
															ne_tDBOutput_1);
													errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
												} else {
													errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
												}

												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}

												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

												System.err.println(errormessage_tDBOutput_1);

											}
										}
										conn_tDBOutput_1.commit();

										commitCounter_tDBOutput_1 = 0;
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "to_pos_brute"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tFileList_1_CURRENT_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
						}
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tDBOutput_1 end ] start
					 */

					currentComponent = "tDBOutput_1";

					try {
						int countSum_tDBOutput_1 = 0;
						if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}

						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
						java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
								sqle_tDBOutput_1 = null;
						String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(
									e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
									ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						} else {
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}

						int countSum_tDBOutput_1 = 0;
						for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

						System.err.println(errormessage_tDBOutput_1);

					}

					if (pstmt_tDBOutput_1 != null) {

						pstmt_tDBOutput_1.close();
						resourceMap.remove("pstmt_tDBOutput_1");
					}
					resourceMap.put("statementClosed_tDBOutput_1", true);

					conn_tDBOutput_1.commit();

					conn_tDBOutput_1.close();

					resourceMap.put("finish_tDBOutput_1", true);

					nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
					nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
					nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
					nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

					globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
					globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("to_pos_brute" + iterateId, 2, 0);
						}
					}

					ok_Hash.put("tDBOutput_1", true);
					end_Hash.put("tDBOutput_1", System.currentTimeMillis());

					/**
					 * [tDBOutput_1 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_1Process(globalMap);

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "INSERT INTO public.pos_traitee(id_vehicule,	\"DATE\",	\"RPM\", \"SPEED\", \"RIGHT_FLASH\", \"LEFT_FLASH\", \"BRAKE_PEDA"
						+ "L\",	\"PRIMARY_LT\", \"WIG_WAG\", \"REVERSE_GEAR\", \"CHASSIS_VOLT\",	\"CONVERS_VOLT\",	\"PARKING_LT\", \"HIGH_BEAM_LT\""
						+ ",	\"SIREN\", \"CHECK_ENGINE\", \"THROTTLE\", \"ODOMETER\", \"LONGITUDE\", \"LATITUDE\", \"IGNITION\", \"TIME_RUNNING\", "
						+ "\"TIME_STOP\", \"TIME_IDLE\", \"ACC_LONG\", \"ACC_LATERAL\", \"ACC_VERTICAL\", \"FUEL_RATE\", \"DRIVER_DOOR\", \"BACK_DO"
						+ "OR\", \"PARK_BRAKE\", \"SEAT_BELT\", \"AIR_BAG\", \"ECO_ACTIVE\", geom4326, geom2154)\n(SELECT id_vehicule, to_timestamp("
						+ "\"DATE\" ||' '|| \"TIME\", 'DD-MM-YYYY HH24 MI SS'), \"RPM\", \"SPEED\", \"RIGHT_FLASH\", \"LEFT_FLASH\", \"BRAKE_PEDAL"
						+ "\", \"PRIMARY_LT\", \"WIG_WAG\", \"REVERSE_GEAR\", \"CHASSIS_VOLT\", \"CONVERS_VOLT\", \"PARKING_LT\", \"HIGH_BEAM_LT\","
						+ " \"SIREN\", \"CHECK_ENGINE\", \"THROTTLE\", \"ODOMETER\", \"LONGITUDE\", \"LATITUDE\", \"IGNITION\", \"TIME_RUNNING\", "
						+ "\"TIME_STOP\", \"TIME_IDLE\", \"ACC_LONG\", \"ACC_LATERAL\", \"ACC_VERTICAL\", \"FUEL_RATE\", \"DRIVER_DOOR\", \"BACK_DO"
						+ "OR\", \"PARK_BRAKE\", \"SEAT_BELT\", \"AIR_BAG\", \"ECO_ACTIVE\", ST_SetSRID(ST_MakePoint(\"LONGITUDE\"::float,\"LATITUD"
						+ "E\"::float),4326),null from pos_brute) ON CONFLICT DO NOTHING ;\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "postgres";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "update pos_traitee set \"CONCAT1\" = 1\nWHERE \n(\n	(geom2154 is null) \nAND (\n		(\"PARK_BRAKE\" =1 and \"SPEED\"=0) OR\n		("
						+ "\"PARK_BRAKE\" = 1 and \"IGNITION\" =0) OR\n		(\"SPEED\" =0 AND \"IGNITION\" = 0)\n	)\n);";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "postgres";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "UPDATE pos_traitee set geom2154= ST_Transform( geom4326, 2154) WHERE geom2154 is null;";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "TRUNCATE pos_brute";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "postgres";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "CREATE materialized VIEW mview_debut_arret_concat1 AS\nselect p1.id_vehicule as id_vehicule, p1.id_ligne as id_start, p2"
						+ ".id_ligne as id_end, p1.\"SPEED\" as speed_start, p2.\"SPEED\" as speed_end, p1.\"DATE\" as ts_start, p2.\"DATE\" as ts_"
						+ "end , p1.geom2154 as point_start, p2.geom2154 as point_end  \nfrom\n(select pos_traitee.* from pos_traitee WHERE \"CONCAT1"
						+ "\" = 0 ) as p1,\n(select pos_traitee.* from pos_traitee WHERE \"CONCAT1\" = 1) as p2\nwhere\np2.\"DATE\"=(select \"DATE\" f"
						+ "rom pos_traitee where id_vehicule=p1.id_vehicule AND \"DATE\" > p1.\"DATE\" ORDER BY \"DATE\"  ASC LIMIT 1) and p1.id_ve"
						+ "hicule = p2.id_vehicule \n;";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "postgres";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "CREATE materialized VIEW mview_fin_arret_concat1 AS\nselect p1.id_vehicule as id_vehicule, p1.id_ligne as id_start, p2.i"
						+ "d_ligne as id_end, p1.\"SPEED\" as speed_start, p2.\"SPEED\" as speed_end, p1.\"DATE\" as ts_start, p2.\"DATE\" as ts_en"
						+ "d , p1.geom2154 as point_start, p2.geom2154 as point_end  \nfrom\n(select pos_traitee.* from pos_traitee WHERE \"CONCAT1\""
						+ " = 1) as p1,\n(select pos_traitee.* from pos_traitee WHERE \"CONCAT1\" = 0) as p2\nwhere\np2.\"DATE\"=(select \"DATE\" from"
						+ " pos_traitee where id_vehicule=p1.id_vehicule AND \"DATE\" > p1.\"DATE\" ORDER BY \"DATE\"  ASC LIMIT 1) and p1.id_vehic"
						+ "ule = p2.id_vehicule \n;";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "postgres";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				conn_tDBInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "CREATE MATERIALIZED VIEW public.mview_arret_concat1\nAS\n SELECT row_number() OVER ()::integer AS id,\n    p1.id_vehicule,"
						+ "\n    p1.id_end AS id_start,\n    p2.id_start AS id_end,\n    p1.ts_end AS ts_start,\n    p2.ts_start AS ts_end,\n    p1.poin"
						+ "t_end AS point_start,\n    p2.point_start AS point_end,\n    p2.ts_start - p1.ts_end AS duree,\n    st_geometricmedian(st_c"
						+ "ollect(ARRAY( SELECT pos_traitee.geom2154\n           FROM pos_traitee\n          WHERE pos_traitee.id_ligne >= p1.id_end "
						+ "AND pos_traitee.id_ligne <= p2.id_start AND pos_traitee.id_vehicule = p1.id_vehicule AND pos_traitee.\"LONGITUDE\" > 0::"
						+ "double precision\n          ORDER BY pos_traitee.id_ligne))) AS point_median,\n    ( SELECT sum(\n                CASE\n    "
						+ "                WHEN pos_traitee.\"LONGITUDE\" > 0::double precision THEN 1\n                    ELSE 0\n                E"
						+ "ND)::numeric / count(pos_traitee.id_ligne)::numeric * 100::numeric\n           FROM pos_traitee\n          WHERE pos_trait"
						+ "ee.id_ligne >= p1.id_end AND pos_traitee.id_ligne <= p2.id_start AND pos_traitee.id_vehicule = p1.id_vehicule) AS ok_per"
						+ "cent\n   FROM ( SELECT mview_debut_arret_concat1.id_vehicule,\n            mview_debut_arret_concat1.id_start,\n           "
						+ " mview_debut_arret_concat1.id_end,\n            mview_debut_arret_concat1.speed_start,\n            mview_debut_arret_conc"
						+ "at1.speed_end,\n            mview_debut_arret_concat1.ts_start,\n            mview_debut_arret_concat1.ts_end,\n           "
						+ " mview_debut_arret_concat1.point_start,\n            mview_debut_arret_concat1.point_end\n           FROM mview_debut_arre"
						+ "t_concat1) p1,\n    ( SELECT mview_fin_arret_concat1.id_vehicule,\n            mview_fin_arret_concat1.id_start,\n         "
						+ "   mview_fin_arret_concat1.id_end,\n            mview_fin_arret_concat1.speed_start,\n            mview_fin_arret_concat1."
						+ "speed_end,\n            mview_fin_arret_concat1.ts_start,\n            mview_fin_arret_concat1.ts_end,\n            mview_f"
						+ "in_arret_concat1.point_start,\n            mview_fin_arret_concat1.point_end\n           FROM mview_fin_arret_concat1) p2\n"
						+ "  WHERE p2.ts_start = (( SELECT mview_fin_arret_concat1.ts_start\n           FROM mview_fin_arret_concat1\n          WHERE"
						+ " mview_fin_arret_concat1.ts_start >= p1.ts_end AND mview_fin_arret_concat1.id_vehicule = p1.id_vehicule\n          ORDER "
						+ "BY mview_fin_arret_concat1.ts_start\n         LIMIT 1)) AND p1.id_vehicule = p2.id_vehicule;";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.commit();

						conn_tDBInput_7.close();

					}

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "postgres";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				conn_tDBInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "CREATE MATERIALIZED VIEW public.mview_arret_rayon_concat1\nAS(\n		 SELECT mview_arret_concat1.id,\n    mview_arret_concat1"
						+ ".id_vehicule,\n    mview_arret_concat1.id_start,\n    mview_arret_concat1.id_end,\n    mview_arret_concat1.ts_start,\n    mv"
						+ "iew_arret_concat1.ts_end,\n    mview_arret_concat1.point_start,\n    mview_arret_concat1.point_end,\n    mview_arret_concat"
						+ "1.duree,\n    mview_arret_concat1.point_median,\n    mview_arret_concat1.ok_percent,\n    ( SELECT percentile_disc(0.9::dou"
						+ "ble precision) WITHIN GROUP (ORDER BY bloc.distance) AS percentile90\n           FROM ( SELECT st_distance(mview_arret_co"
						+ "ncat1.point_median, pos_traitee.geom2154) AS distance\n                   FROM pos_traitee\n                  WHERE pos_tr"
						+ "aitee.id_ligne >= mview_arret_concat1.id_start AND pos_traitee.id_ligne <= mview_arret_concat1.id_end AND pos_traitee.id"
						+ "_vehicule = pos_traitee.id_vehicule AND pos_traitee.\"LONGITUDE\" > 0::double precision) bloc) AS percentile90\n   FROM m"
						+ "view_arret_concat1);";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.commit();

						conn_tDBInput_8.close();

					}

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "postgres";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("Wc5JN7QOl+hOSS4VvmpEAQ==");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String url_tDBInput_9 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "ambulance";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				conn_tDBInput_9.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "CREATE MATERIALIZED VIEW public.mview_trajets_stop_concat1\nTABLESPACE pg_default\nAS\n SELECT row_number() OVER ()::integ"
						+ "er AS id_traj,\n    debut.id_vehicule,\n    debut.id AS arret_debut,\n    fin.id AS arret_fin,\n    debut.id_end AS debut_tr"
						+ "aj,\n    fin.id_start AS fin_traj,\n    fin.ts_start - debut.ts_end AS duree,\n    st_makeline(ARRAY( SELECT pos_traitee.ge"
						+ "om2154\n           FROM pos_traitee\n          WHERE pos_traitee.id_ligne >= debut.id_end AND pos_traitee.id_ligne <= fin."
						+ "id_start AND pos_traitee.\"LATITUDE\" > '0'::double precision\n          ORDER BY pos_traitee.id_ligne)) AS st_makeline\n "
						+ "  FROM mview_arret_rayon_concat1 debut,\n    mview_arret_rayon_concat1 fin\n  WHERE debut.id_vehicule = fin.id_vehicule AN"
						+ "D fin.ts_start = (( SELECT mview_arret_rayon_concat1.ts_start\n           FROM mview_arret_rayon_concat1\n          WHERE "
						+ "mview_arret_rayon_concat1.id_vehicule = debut.id_vehicule AND mview_arret_rayon_concat1.ts_start > debut.ts_end\n        "
						+ "  ORDER BY mview_arret_rayon_concat1.ts_start\n         LIMIT 1))\n  ORDER BY debut.id_end\nWITH DATA;\n\nALTER TABLE public."
						+ "mview_trajets_stop_concat1\n    OWNER TO postgres;";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.commit();

						conn_tDBInput_9.close();

					}

				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final csv_ToBrute_ToTraitee csv_ToBrute_ToTraiteeClass = new csv_ToBrute_ToTraitee();

		int exitCode = csv_ToBrute_ToTraiteeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = csv_ToBrute_ToTraitee.class.getClassLoader().getResourceAsStream(
					"local_project/csv_tobrute_totraitee_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = csv_ToBrute_ToTraitee.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_1) {
			globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

			e_tFileList_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : csv_ToBrute_ToTraitee");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 169139 characters generated by Talend Open Studio for Big Data on the July
 * 15, 2019 3:54:24 PM CEST
 ************************************************************************************************/